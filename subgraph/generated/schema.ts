// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get isReviewer(): boolean {
    let value = this.get("isReviewer");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isReviewer(value: boolean) {
    this.set("isReviewer", Value.fromBoolean(value));
  }

  get ratingsGiven(): RatingLoader {
    return new RatingLoader("User", this.get("id")!.toString(), "ratingsGiven");
  }

  get ratingsReceived(): RatingLoader {
    return new RatingLoader(
      "User",
      this.get("id")!.toString(),
      "ratingsReceived"
    );
  }

  get sponsorshipsReceived(): SponsorshipLoader {
    return new SponsorshipLoader(
      "User",
      this.get("id")!.toString(),
      "sponsorshipsReceived"
    );
  }

  get sponsorshipsGiven(): SponsorshipLoader {
    return new SponsorshipLoader(
      "User",
      this.get("id")!.toString(),
      "sponsorshipsGiven"
    );
  }

  get hiringOutcomes(): HiringOutcomeLoader {
    return new HiringOutcomeLoader(
      "User",
      this.get("id")!.toString(),
      "hiringOutcomes"
    );
  }
}

export class Reviewer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reviewer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reviewer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reviewer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Reviewer | null {
    return changetype<Reviewer | null>(store.get_in_block("Reviewer", id));
  }

  static load(id: string): Reviewer | null {
    return changetype<Reviewer | null>(store.get("Reviewer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get approvedAt(): BigInt {
    let value = this.get("approvedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set approvedAt(value: BigInt) {
    this.set("approvedAt", Value.fromBigInt(value));
  }
}

export class Rating extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rating entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Rating must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Rating", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Rating | null {
    return changetype<Rating | null>(store.get_in_block("Rating", id));
  }

  static load(id: string): Rating | null {
    return changetype<Rating | null>(store.get("Rating", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reviewer(): string {
    let value = this.get("reviewer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reviewer(value: string) {
    this.set("reviewer", Value.fromString(value));
  }

  get skill(): string {
    let value = this.get("skill");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set skill(value: string) {
    this.set("skill", Value.fromString(value));
  }

  get skillHash(): Bytes {
    let value = this.get("skillHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set skillHash(value: Bytes) {
    this.set("skillHash", Value.fromBytes(value));
  }

  get overallRating(): i32 {
    let value = this.get("overallRating");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set overallRating(value: i32) {
    this.set("overallRating", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Sponsorship extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sponsorship entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Sponsorship must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sponsorship", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Sponsorship | null {
    return changetype<Sponsorship | null>(
      store.get_in_block("Sponsorship", id)
    );
  }

  static load(id: string): Sponsorship | null {
    return changetype<Sponsorship | null>(store.get("Sponsorship", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sponsor(): string {
    let value = this.get("sponsor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sponsor(value: string) {
    this.set("sponsor", Value.fromString(value));
  }

  get candidate(): string {
    let value = this.get("candidate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set candidate(value: string) {
    this.set("candidate", Value.fromString(value));
  }

  get job(): string {
    let value = this.get("job");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set job(value: string) {
    this.set("job", Value.fromString(value));
  }

  get jobIdHash(): Bytes {
    let value = this.get("jobIdHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set jobIdHash(value: Bytes) {
    this.set("jobIdHash", Value.fromBytes(value));
  }

  get creditsUsed(): BigInt {
    let value = this.get("creditsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creditsUsed(value: BigInt) {
    this.set("creditsUsed", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class HiringOutcome extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HiringOutcome entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HiringOutcome must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HiringOutcome", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HiringOutcome | null {
    return changetype<HiringOutcome | null>(
      store.get_in_block("HiringOutcome", id)
    );
  }

  static load(id: string): HiringOutcome | null {
    return changetype<HiringOutcome | null>(store.get("HiringOutcome", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get candidate(): string {
    let value = this.get("candidate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set candidate(value: string) {
    this.set("candidate", Value.fromString(value));
  }

  get isHired(): boolean {
    let value = this.get("isHired");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isHired(value: boolean) {
    this.set("isHired", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Skill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Skill entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Skill must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Skill", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Skill | null {
    return changetype<Skill | null>(store.get_in_block("Skill", id));
  }

  static load(id: string): Skill | null {
    return changetype<Skill | null>(store.get("Skill", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get ratings(): RatingLoader {
    return new RatingLoader("Skill", this.get("id")!.toString(), "ratings");
  }

  get averageRating(): BigDecimal {
    let value = this.get("averageRating");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageRating(value: BigDecimal) {
    this.set("averageRating", Value.fromBigDecimal(value));
  }

  get totalRatings(): i32 {
    let value = this.get("totalRatings");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalRatings(value: i32) {
    this.set("totalRatings", Value.fromI32(value));
  }
}

export class Job extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Job entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Job must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Job", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Job | null {
    return changetype<Job | null>(store.get_in_block("Job", id));
  }

  static load(id: string): Job | null {
    return changetype<Job | null>(store.get("Job", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get sponsorships(): SponsorshipLoader {
    return new SponsorshipLoader(
      "Job",
      this.get("id")!.toString(),
      "sponsorships"
    );
  }

  get totalCreditsSpent(): BigInt {
    let value = this.get("totalCreditsSpent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCreditsSpent(value: BigInt) {
    this.set("totalCreditsSpent", Value.fromBigInt(value));
  }

  get totalSponsorships(): i32 {
    let value = this.get("totalSponsorships");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSponsorships(value: i32) {
    this.set("totalSponsorships", Value.fromI32(value));
  }
}

export class RatingLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Rating[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Rating[]>(value);
  }
}

export class SponsorshipLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Sponsorship[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Sponsorship[]>(value);
  }
}

export class HiringOutcomeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HiringOutcome[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HiringOutcome[]>(value);
  }
}
